=head1 NAME

B<wmjump> - keyboard navigation of the desktop; use the keyboard to
switch between windows and workspaces

=head1 SYNOPSIS

    wmjump [OPTION]

=head1 DESCRIPTION

B<wmjump> 
pops up a dialog box with a list of running windows in their historical order,
and a letter
next to each item. Pressing the corresponding key brings you to that window.
Pressing the space bar brings you to the previous window.
Pressing the number key 1 to 9 brings you to the
corresponding workspace.


I recommend creating a keyboard shortcut for  B<wmjump>.  
In I<Xfce>, go to Settings -> Settings Manager -> Keyboard -> Keyboard
Shortcuts. In I<gnome>, google for: gnome custom keyboard shortcut.  I use
<Alt>-k after I<Ion3>. Also see B<OPTIONS>.

The items are colored according to the window class. The assignment of colors
can be changed in the configuration files, as described below.  I recommend
having the I<Industrial> gtk engine installed, because it looks nice with the
multicolored buttons. (It is probably installed by default in Ubuntu.) It is
not necessary to make it a default gtk engine, only B<wmjump> will use it.

B<wmjump> can show a header message at the top of its window. The message
is read from the file B<~/.wmjump/wmjump-message>, if this file is present
and is not empty. For example, the user may schedule a cron job to put the
current date+time into this file.

B<wmjump> is supposed to work on all I<EWMH/NetWM> compatible window managers.

=head1 OPTIONS

The following options modify the behaviour of  B<wmjump>

=over 4

=item  B<-c, --current>

Only list windows on the current desktop. I recommend two separate keyboard
shortcuts, for example: I<Alt>I<-k> for B<wmjump> and I<Alt>I<-j> 
for B<wmjump --current>.

Then pressing I<Alt>I<-k> shows all the windows on all desktops, so you can
jump across desktops.  On the other hand, pressing I<Alt>I<-j> shows only the
windows on the current desktop. This is useful when you are running many
windows, organized by the desktop. (For example, network applications on
Desktop 1, games on Desktop 2, office suite on Desktop 3, etc.)

=item B<--easy>

With this option wmjump uses a simplified procedure for switching 
windows. This can make switching faster and more reliable, but does not
work on some window managers. For example, this does not work on
*Metacity* (but does work on *xmonad*)

=item B<-g> <desktop number>

This is a workaround for I<StumpWM>, and maybe some other window managers.
Sometimes wmjump can not properly determine the current workspace number (group
number in I<StumpWM>).  But with the B<-g> option you can write a wrapper
script which explicitly tells wmjump on which desktop it is started. See B<SETUP>
section for an example of such a wrapper on I<StumpWM>.

=item B<--location=60x40>

The location of the wmjump window, the upper left corner with respect
to the upper left corner of the screen. Of course you can use any
B<--location=100x20> or B<--location=300x300> or whatever values are desired.

=item B<-p, --persist>

Starting with v0.9 B<wmjump> window is auto-destroyed on loss of focus. This is
to prevent ``stray'' wmjump windows. But if B<wmjump> is started with  the
B<--persist> option, then the window will be preserved even after it loses the
focus.

=item B<--pipe>

This might speed up the firing-up
of the wmjump dialog. With this option, a pipe is created:
    ~/.wmjump/pipe.fifo
and the started wmjump is waiting on the pipe. In this regime wmjump
works like a ``daemon'' program. In some circumstances, this may speed
up the startup.
To fire up the wmjump dialog, do this:
    echo all>~/.wmjump/pipe.fifo
        (if you want to see all windows on all desktops)
        OR:
    echo current>~/.wmjump/pipe.fifo
        (if you want to see only windows on the current desktop,
         like wmjump --current)
    putting anything else into pipe.fifo would lead to wmjump exiting,
    for example:
    echo exit>~/.wmjump/pipe.fifo

=item B<-r, --reverse>

Use this option if you want to see the list of windows in reverse order.

=item B< --rich>

With this option the rich text formatting is used to make the wmjump
dialogue more readable. The hint letters are boldfaced. The name of the
currently active window is printed in larger font and underlined.

=item B<--timeout=>

This is to set the timeout for the dialog window. If executed:

  wmjump --timeout=3

the wmjump window will autodestroy in 3 seconds.

=item B<-v, --verbose>

By default, the program is executed silently. Use the verbose mode for diagnostics.

=back

=head1 FILES

  ~/.wmjump/wmjump-message

optional header message. For example, the user may schedule a cron job to put date/time there:

  * * * * * /home/myname/bin/every-min.sh > /home/myname/.wmjump/wmjump-message

where B<every-min.sh> is something like: 
  
  date > /home/myname/.wmjump/wmjump-message

plus maybe some warnings;

  ~/.wmjump/wmjump-rc

configures the user interface style (GTK)

  ~/.wmjump/wmjump-blacklist

the list of window classes which should not show up in B<wmjump>

  ~/.wmjump/wmjump-previous-window 

this is for the internal use of the program; do not modify this file

  ~/.wmjump/pipe.fifo

the pipe (see the experimental option B<--pipe>)


=head1 SETUP

If you want to edit the configuration files, you should create a subdirectory
B<.wmjump> in your home directory, and then copy to this directory the files
B<wmjump-rc> and B<wmjump-blacklist> which are found in B</etc/wmjump/>.  Then
you can edit these files. The file B<wmjump-rc> defines the color and the text
font of the buttons, depending on the window class of the application. You can
learn the window classes of running windows by executing B<wmjump -v> from the
command line in a terminal. It will print a list of windows with classes, such
as I<Navigator>, I<emacs>, I<opera> etc.  The file B<wmjump-blacklist> contains
the names of classes which you don't want to see in B<wmjump>.  For example
I<gnome-panel> and I<desktop_window>

For I<StumpWM> users.  I<StumpWM> is a tiling window manager. We tested wmjump
on I<StumpWM 0.9.5>. At this time wmjump cannot determine the desktop number
(a.k.a ``group number'') if started on an empty desktop. As a workaround, we
start wmjump with the following wrapping script in I<.stumpwmrc>:

    (define-key *top-map* (kbd "M-k") "exec wmjump --reverse")
    (define-key *top-map* (kbd "M-j") "eval-line (let ((dnum (stumpwm::tile-group-number (current-group)) ))  (run-shell-command (concatenate 'string \"exec wmjump --current --reverse -g\" (write-to-string (- dnum 1)))) (stumpwm::tile-group-name (current-group)))")

This puts B<wmjump> on I<META-k> and B<wmjump --current> on I<META-j>. This wrapping script
is to tell wmjump on which group it is started. It assumes that groups are numbered from 1
to up to 9. (Notice that wmjump looks up the
group number only if started with the B<--current> option. Without this option
it does not need to know the desktop number.)

=head1 BUGS

On I<Fvwm> the windows are listed in random order rather than historical,
making it much less useful. 

I<Focus> problems: sometimes the jumped window loses focus. This was only
observed when running I<Opera>. In I<Xfce> the focus can be returned by
pressing I<Alt-TAB>.  If this happens often, maybe try to recompile with
different values of TIME_SHORT, TIME_MIDDLE and TIME_LONG in the definitions of
I<main.c>.  Also, in I<Xfce>, activating the "focus stealing prevention" helps.
It is in Settings -> Settings Manager -> Window manager tweaks -> Focus.


=head1 SEE ALSO

The program makes use of the 
B<wmctrl>
source code. It is inspired by 
the Firefox extension 
B<Vimperator>.


=head1 AUTHOR

wmjump was written by Andrei Mikhailov <a.mkhlv at gmail dot com>.


=head1 COPYRIGHT

Copyright (C) 2008.
This program is free software which I release under the GNU General Public
License. You may redistribute and/or modify this program under the terms
of that license as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
To get a copy of the GNU General Puplic License,  write to the
Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

=cut

